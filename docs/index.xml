<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Zig Programming Language</title><link>//ziglang.github.io/www.ziglang.org/</link><description>Recent content in Home on Zig Programming Language</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 13 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="//ziglang.github.io/www.ziglang.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Zig 0.7.1 Released: 69 Bugs Fixed</title><link>//ziglang.github.io/www.ziglang.org/news/zig-0.7.1/</link><pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate><guid>//ziglang.github.io/www.ziglang.org/news/zig-0.7.1/</guid><description>Zig 0.7.1 Released: 69 Bugs Fixed Please enjoy this nice release!
Release Notes
Download</description></item><item><title>Zig at FOSDEM 2021: CfP is Open!</title><link>//ziglang.github.io/www.ziglang.org/news/fosdem-2021/</link><pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate><guid>//ziglang.github.io/www.ziglang.org/news/fosdem-2021/</guid><description>Zig at FOSDEM 2021: CfP is Open! We&amp;rsquo;ve taken part to FOSDEM 2021 and we are looking for talk submissions.
About FOSDEM FOSDEM is a free conference ordinarily hosted in Europe. This year it will be held on-line for the first time. There is no registration, but attendees are expected to follow FOSDEM&amp;rsquo;s code of conduct.
Call for Papers What we&amp;rsquo;re looking for We&amp;rsquo;re interested in all kinds of talks about Zig, of course!</description></item><item><title>Sponsor ZSF</title><link>//ziglang.github.io/www.ziglang.org/zsf/</link><pubDate>Tue, 20 Oct 2020 16:29:51 +0200</pubDate><guid>//ziglang.github.io/www.ziglang.org/zsf/</guid><description>Sponsoring the Zig Software Foundation Sponsor on GitHuba:hover #llink{fill:url(#b);stroke:#ccc}a:hover #rlink{fill:#4183c4}Sponsor on GitHubSponsor on GitHub Mission statement The mission of the Zig Software Foundation is to promote, protect, and advance the Zig programming language, to support and facilitate the growth of a diverse and international community of Zig programmers, and to provide education and guidance to students, teaching the next generation of programmers to be competent, ethical, and to hold each other to high standards.</description></item><item><title>Zigソフトウェア財団とZenプログラミング言語に関する声明</title><link>//ziglang.github.io/www.ziglang.org/news/statement-regarding-zen-programming-language/</link><pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate><guid>//ziglang.github.io/www.ziglang.org/news/statement-regarding-zen-programming-language/</guid><description>Original English version available below. We are thankful to 株式会社HYPERIA and all the members of the Zig community that helped us with the Japanese translation. Zigソフトウェア財団とZenプログラミング言語に関する声明 Zigソフトウェア財団は、Zigの開発者アンドリュー・ケリーによって創設された501(c)(3)非営利組織です。本財団はZigプログラミング言語開発のサポートと優れたグローバルコミュニティの育成を目的としています。
対してZenはコネクトフリー社によって保守されているZigのクローズドソースフォークです。コネクトフリー社は最近Zenコンパイラのためのライセンスモデルを発表し、ソフトウェア開発者は自分で作成したコードのコンパイル済みリリースを配布する上で年間サブスクリプションの購読が必要になりました。
Zigプロジェクトとコネクトフリー社の関係性についてコネクトフリー社は完全には明確にしていません。そこで、本声明ではこの関係性について明確にしたいと考えています。日本の皆様がZenコンパイラへの年間ライセンス料を支払う前に、ZigとZenが分岐した背景を知っていただきたいと考えています。
「Zigからの発展」ページにおいて、コネクトフリー社はZenはZigバージョン0.3.0から独立して進化してきたとしており、またZigの貢献者である「No.5」と「No.2」はコネクトフリー社の従業員であり、「No.5」はコネクトフリー社創設者のクリストファー・テイト氏であると述べています。この他に、このページではZenがZigと比較してどのような点で優れているかというバリュー・プロポジションと、開発チームのある種の正統性——彼らが信頼に値する存在だということを示そうとしているようです。
Zenが独立的に進化してきたという主張については、私どもはクローズドソースであるコンパイラの内部実装についてはコメントできないものの、Zen標準ライブラリのソースコードはZenリリースの度にまだ入手可能です。このソースコードを読むと、コネクトフリー社がZigプロジェクトからいまだに多くのコードを借用していることが簡単に分かります。ほとんどの場合、彼らの命名規則に合わせるために非常に小さな変化を適用しているに過ぎません。この一例として「async/await」機能があります。この機能はZigバージョン0.6.0 (バージョン0.3.0の約1年半後) で導入されましたが、コネクトフリー社によってZenに実質的に全く変更なくコピーされました。もう一つの例として、こちらのリンクから二つのイベントループ実装の比較をご覧いただけます。
開発チームについてのお話をしましょう。「No.5」(すなわちクリストファー・テイト氏) はZigプロジェクトの公共の場であるGitHubとIRCで繰り返し問題のある行動を行ったため、プロジェクトから追放されなければならなくなりました。こうした経緯があることをコネクトフリー社は明らかにしていません。その後、テイト氏は「No.2」をZenコンパイラに取り組ませるために雇いましたが、この契約にあたってプライベートな時間で作られたものも含め「No.2」が書いた全てのコードの所有権がコネクトフリー社にも帰属するという契約内容について適切に明確化することを怠りました。その時以来「No.2」はコネクトフリー社の職を辞めましたが、契約の中に示されている「競業避止義務」条項のために、Zigプロジェクトにしばらくのあいだ貢献することもできません。さらに、テイト氏はいくつかのZigコミュニティで宣伝活動を行い、複数のZigコントリビュータをメール経由でスカウトしようとしていたことが知られています。おそらく「No.2」と同じ契約条件で雇おうとしていたものと考えられます。
以下内容は私どもの公式ウェブサイトからの引用で、Zigソフトウェア財団の使命です。
Zigソフトウェア財団の使命は、Zigプログラミング言語を促進・保護・発展させること、Zigプログラマーの多様で国際的なコミュニティの成長を支えること、また学生に教育と指導を提供し、次世代のプログラマーを有能かつ倫理的に高い水準を持つ人材へと育成することです。 コネクトフリー社の創設者であるテイト氏は、不完全な技術論により彼自身の行動を正当化しようとすると同時に、契約条項を利用してZigの貢献者がこのオープンソースプロジェクトに更に貢献する事を阻止しています。また、コネクトフリー社のZenはZigを表面的にリブランディングしたものに過ぎません。このようなテイト氏の過去と現在の振舞いから、日本の専門家や会社がこうしたクローズドソース製品に頼り生計をたてようとするのは、私どもの良識としてはお勧めできません。
Zigのオープンな設計プロセスは協調の精神に基づいており、オープンソース開発を通じてのみ達成可能なレベルの技術的な卓越性と圧倒的な改善スピードの実現を目指しています。Zigをユニークで革新的な言語たらしめる多くの特徴 (comptime, async/await, sentinel終端ポインタ型, エラー型等々) は、こうした設計プロセスを進めた結果生まれたものです。
以上より、堅固かつ最適で再利用可能なコードの作成に興味のある日本の開発者の皆様を世界的なZigコミュニティにお招きしご参加頂く事で、限られた人たちの特権に1円も払う事なく、本物のコードに触れて楽しんで頂きたいと考えております。
この度は本声明をお読み頂き、誠に有難うございました。
Kindest regards,
Loris Cro - VP of Community
Zig Software Foundation
【追伸】
私どもは、教材や説明書を日本語含む様々な言語で伝える事にご協力いただける方を探しています。もしご興味がおありでしたら、こちらまでご連絡ください！nippon@ziglang.org
Original English version follows. Statement Regarding the Zen Programming Language The Zig Software Foundation is a 501(c)(3) non-profit organization created by Andrew Kelley, the creator of Zig, with the goal of supporting the development of the Zig programming language, as well as fostering an equally excellent global community around it.</description></item><item><title>Announcing the Zig Software Foundation</title><link>//ziglang.github.io/www.ziglang.org/news/announcing-zig-software-foundation/</link><pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate><guid>//ziglang.github.io/www.ziglang.org/news/announcing-zig-software-foundation/</guid><description>Announcing the Zig Software Foundation In the United States, people look at you funny if you tell them you are starting a non-profit.
&amp;ldquo;Don’t you want to to get rich?&amp;rdquo; they ask.
Even the bank employee indicated this was an unusual process, setting up an account for a non-profit. She had to call her manager in several times to help figure out the system.
I think we have it precisely backwards.</description></item><item><title>Code Examples</title><link>//ziglang.github.io/www.ziglang.org/learn/samples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>//ziglang.github.io/www.ziglang.org/learn/samples/</guid><description>Memory leak detection Using std.GeneralPurposeAllocator you can track double frees and memory leaks.
leak.zig
const std = @import(&amp;quot;std&amp;quot;); pub fn main() !void { var gpalloc = std.heap.GeneralPurposeAllocator(.{}){}; defer std.debug.assert(!gpalloc.deinit()); const alloc = &amp;amp;gpalloc.allocator; const u32_ptr = try alloc.create(u32); // oops I forgot to free! }$ zig build-exe leak.zig $ ./leak error(std): Memory leak detected: /home/runner/work/www.ziglang.org/www.ziglang.org/doctest-26501fc4/leak.zig:9:37: 0x22dfa4 in main (leak) const u32_ptr = try alloc.create(u32); ^ /home/runner/work/www.ziglang.org/zig/lib/std/start.zig:345:37: 0x205704 in std.start.posixCallMainAndExit (leak) const result = root.</description></item><item><title>Getting Started</title><link>//ziglang.github.io/www.ziglang.org/learn/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>//ziglang.github.io/www.ziglang.org/learn/getting-started/</guid><description>Note for Apple Silicon users Zig has experimental support for codesigning. You will be able to use Zig with your M1 Mac, but the only way at the moment to get Zig for arm64 macOS is to compile it yourself. Make sure to check the Building from source section.
Tagged release or nightly build? Zig has not yet reached v1.0 and the current release cycle is tied to new releases of LLVM, which have a ~6 months cadence.</description></item><item><title>In-depth Overview</title><link>//ziglang.github.io/www.ziglang.org/learn/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>//ziglang.github.io/www.ziglang.org/learn/overview/</guid><description>Feature Highlights Small, simple language Focus on debugging your application rather than debugging your programming language knowledge.
Zig&amp;rsquo;s entire syntax is specified with a 500-line PEG grammar file.
There is no hidden control flow, no hidden memory allocations, no preprocessor, and no macros. If Zig code doesn&amp;rsquo;t look like it&amp;rsquo;s jumping away to call a function, then it isn&amp;rsquo;t. This means you can be sure that the following code calls only foo() and then bar(), and this is guaranteed without needing to know the types of anything:</description></item><item><title>Tools</title><link>//ziglang.github.io/www.ziglang.org/learn/tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>//ziglang.github.io/www.ziglang.org/learn/tools/</guid><description>Language Servers Language servers are editor-agnostic tools for obtaining syntax highlighting, autocompletion, and many other features. Consider using a Language server over a syntax-highlighting extension for a richer development experience.
zigtools/zls Text Editors Editor-specific tools, mostly syntax highlighters.
VS Code ziglang/vscode-zig Sublime Text ziglang/sublime-zig-language Vim ziglang/zig.vim Emacs ziglang/zig-mode Kate ziglang/kde-syntax-highlighting Documentation and Testing kristoff-it/zig-doctest</description></item><item><title>Translations</title><link>//ziglang.github.io/www.ziglang.org/translations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>//ziglang.github.io/www.ziglang.org/translations/</guid><description>Translations These are all translations provided by the community. To contribute fixes and new translations, please check the repository.
The original content is written in English.
Available translations Italiano</description></item><item><title>Why Zig When There is Already C++, D, and Rust?</title><link>//ziglang.github.io/www.ziglang.org/learn/why_zig_rust_d_cpp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>//ziglang.github.io/www.ziglang.org/learn/why_zig_rust_d_cpp/</guid><description>No hidden control flow If Zig code doesn&amp;rsquo;t look like it&amp;rsquo;s jumping away to call a function, then it isn&amp;rsquo;t. This means you can be sure that the following code calls only foo() and then bar(), and this is guaranteed without needing to know the types of anything:
var a = b + c.d; foo(); bar(); D has @property functions, which are methods that you call with what looks like field access, so in the above example, c.</description></item></channel></rss>